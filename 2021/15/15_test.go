package main

import (
	"testing"

	"github.com/google/go-cmp/cmp"
)

func TestReadFile(t *testing.T) {
	data := readFile("sample.txt")
	want := board{
		Danger: [][]int{
			{1, 1, 6, 3, 7, 5, 1, 7, 4, 2},
			{1, 3, 8, 1, 3, 7, 3, 6, 7, 2},
			{2, 1, 3, 6, 5, 1, 1, 3, 2, 8},
			{3, 6, 9, 4, 9, 3, 1, 5, 6, 9},
			{7, 4, 6, 3, 4, 1, 7, 1, 1, 1},
			{1, 3, 1, 9, 1, 2, 8, 1, 3, 7},
			{1, 3, 5, 9, 9, 1, 2, 4, 2, 1},
			{3, 1, 2, 5, 4, 2, 1, 6, 3, 9},
			{1, 2, 9, 3, 1, 3, 8, 5, 2, 1},
			{2, 3, 1, 1, 9, 4, 4, 5, 8, 1},
		},
		Exit: coord{9, 9},
	}

	if diff := cmp.Diff(want, data); diff != "" {
		t.Errorf("bad at reading map:\n%s", diff)
	}
}

func TestDuplicate(t *testing.T) {
	data := readFile("sample.txt")
	data.duplicate(2)
	want := [][]int{
		{1, 1, 6, 3, 7, 5, 1, 7, 4, 2, 2, 2, 7, 4, 8, 6, 2, 8, 5, 3},
		{1, 3, 8, 1, 3, 7, 3, 6, 7, 2, 2, 4, 9, 2, 4, 8, 4, 7, 8, 3},
		{2, 1, 3, 6, 5, 1, 1, 3, 2, 8, 3, 2, 4, 7, 6, 2, 2, 4, 3, 9},
		{3, 6, 9, 4, 9, 3, 1, 5, 6, 9, 4, 7, 1, 5, 1, 4, 2, 6, 7, 1},
		{7, 4, 6, 3, 4, 1, 7, 1, 1, 1, 8, 5, 7, 4, 5, 2, 8, 2, 2, 2},
		{1, 3, 1, 9, 1, 2, 8, 1, 3, 7, 2, 4, 2, 1, 2, 3, 9, 2, 4, 8},
		{1, 3, 5, 9, 9, 1, 2, 4, 2, 1, 2, 4, 6, 1, 1, 2, 3, 5, 3, 2},
		{3, 1, 2, 5, 4, 2, 1, 6, 3, 9, 4, 2, 3, 6, 5, 3, 2, 7, 4, 1},
		{1, 2, 9, 3, 1, 3, 8, 5, 2, 1, 2, 3, 1, 4, 2, 4, 9, 6, 3, 2},
		{2, 3, 1, 1, 9, 4, 4, 5, 8, 1, 3, 4, 2, 2, 1, 5, 5, 6, 9, 2},
		{2, 2, 7, 4, 8, 6, 2, 8, 5, 3, 3, 3, 8, 5, 9, 7, 3, 9, 6, 4},
		{2, 4, 9, 2, 4, 8, 4, 7, 8, 3, 3, 5, 1, 3, 5, 9, 5, 8, 9, 4},
		{3, 2, 4, 7, 6, 2, 2, 4, 3, 9, 4, 3, 5, 8, 7, 3, 3, 5, 4, 1},
		{4, 7, 1, 5, 1, 4, 2, 6, 7, 1, 5, 8, 2, 6, 2, 5, 3, 7, 8, 2},
		{8, 5, 7, 4, 5, 2, 8, 2, 2, 2, 9, 6, 8, 5, 6, 3, 9, 3, 3, 3},
		{2, 4, 2, 1, 2, 3, 9, 2, 4, 8, 3, 5, 3, 2, 3, 4, 1, 3, 5, 9},
		{2, 4, 6, 1, 1, 2, 3, 5, 3, 2, 3, 5, 7, 2, 2, 3, 4, 6, 4, 3},
		{4, 2, 3, 6, 5, 3, 2, 7, 4, 1, 5, 3, 4, 7, 6, 4, 3, 8, 5, 2},
		{2, 3, 1, 4, 2, 4, 9, 6, 3, 2, 3, 4, 2, 5, 3, 5, 1, 7, 4, 3},
		{3, 4, 2, 2, 1, 5, 5, 6, 9, 2, 4, 5, 3, 3, 2, 6, 6, 7, 1, 3},
	}
	if diff := cmp.Diff(want, data.Danger); diff != "" {
		for _, l := range data.Danger {
			t.Logf("%v", l)
		}
		t.Errorf("bad duplicate:\n%s", diff)
	}
}

func TestFindPath(t *testing.T) {
	b := readFile("sample.txt")
	p, score := b.aStar()
	t.Logf("%v", p)
	b.draw(p)
	if score != 40 {
		t.Errorf("bad score, wanted 40, got %d", score)
	}
}

func TestFindPathDup(t *testing.T) {
	b := readFile("sample.txt")
	b.duplicate(5)
	p, score := b.aStar()
	t.Logf("%v", p)
	b.draw(p)
	if score != 315 {
		t.Errorf("bad score, wanted 315, got %d", score)
	}
}
